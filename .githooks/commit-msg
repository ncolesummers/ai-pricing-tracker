#!/usr/bin/env python3
"""
Git hook to validate commit messages according to Conventional Commits.
Place this file in .git/hooks/commit-msg or use it with pre-commit.
"""

import re
import sys
from typing import List, Optional


COMMIT_MSG_PATTERN = r"^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([a-z-]+\))?!?:\s.+"
BREAKING_CHANGE_PATTERN = r"BREAKING CHANGE:"


def validate_commit_message(message_lines: List[str]) -> bool:
    """
    Validate that commit message follows conventional commit format.
    
    Args:
        message_lines: List of lines in the commit message
    
    Returns:
        bool: True if valid, False otherwise
    """
    # Skip merge commits
    if message_lines and message_lines[0].startswith("Merge "):
        return True
    
    # Skip empty commits
    if not message_lines or not message_lines[0].strip():
        return False
    
    # Validate header line
    header = message_lines[0]
    if not re.match(COMMIT_MSG_PATTERN, header):
        print(f"Error: Commit message header does not follow conventional format.")
        print(f"Expected: <type>[optional scope]: <description>")
        print(f"Types: build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test")
        print(f"Actual: {header}")
        return False
    
    # Check for breaking change marker consistency
    has_exclamation = "!" in header.split(":")[0]
    has_breaking_footer = any(re.match(BREAKING_CHANGE_PATTERN, line.strip()) 
                             for line in message_lines)
    
    if has_exclamation and not has_breaking_footer:
        print("Warning: Commit marked as breaking change with ! but missing BREAKING CHANGE: in footer")
    
    return True


if __name__ == "__main__":
    commit_msg_file = sys.argv[1]
    with open(commit_msg_file, "r") as f:
        commit_msg = f.read()
    
    # Remove comment lines
    lines = [line for line in commit_msg.split("\n") if not line.startswith("#")]
    
    if not validate_commit_message(lines):
        sys.exit(1)